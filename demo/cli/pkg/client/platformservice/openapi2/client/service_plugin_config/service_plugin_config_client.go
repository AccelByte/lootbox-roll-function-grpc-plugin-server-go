// Code generated by go-swagger; DO NOT EDIT.

package service_plugin_config

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new service plugin config API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for service plugin config API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteLootBoxPluginConfig(params *DeleteLootBoxPluginConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteLootBoxPluginConfigNoContent, error)

	UpdateLootBoxPluginConfig(params *UpdateLootBoxPluginConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateLootBoxPluginConfigOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteLootBoxPluginConfig deletes lootbox plugin config

Delete service plugin config.<br>Other detail info: <ul><li><i>Required permission</i>: resource=ADMIN:NAMESPACE:{namespace}:PLUGIN:CATALOG, action=8 (DELETE)</li></ul>
*/
func (a *Client) DeleteLootBoxPluginConfig(params *DeleteLootBoxPluginConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteLootBoxPluginConfigNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLootBoxPluginConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteLootBoxPluginConfig",
		Method:             "DELETE",
		PathPattern:        "/admin/namespaces/{namespace}/catalog/plugins/lootbox",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLootBoxPluginConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLootBoxPluginConfigNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteLootBoxPluginConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateLootBoxPluginConfig updates lootbox plugin config

Update lootbox plugin config. Other detail info: <ul><li><i>Required permission</i>: resource=ADMIN:NAMESPACE:{namespace}:PLUGIN:CATALOG, action=4 (UPDATE)</li><li><i>Returns</i>: updated service plugin config</li></ul>
*/
func (a *Client) UpdateLootBoxPluginConfig(params *UpdateLootBoxPluginConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateLootBoxPluginConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateLootBoxPluginConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateLootBoxPluginConfig",
		Method:             "PUT",
		PathPattern:        "/admin/namespaces/{namespace}/catalog/plugins/lootbox",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateLootBoxPluginConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateLootBoxPluginConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateLootBoxPluginConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
