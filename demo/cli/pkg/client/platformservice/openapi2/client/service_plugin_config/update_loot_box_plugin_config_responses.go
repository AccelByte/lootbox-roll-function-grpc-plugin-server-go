// Code generated by go-swagger; DO NOT EDIT.

package service_plugin_config

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"cli/pkg/client/platformservice/openapi2/models"
)

// UpdateLootBoxPluginConfigReader is a Reader for the UpdateLootBoxPluginConfig structure.
type UpdateLootBoxPluginConfigReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateLootBoxPluginConfigReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateLootBoxPluginConfigOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewUpdateLootBoxPluginConfigNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateLootBoxPluginConfigUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateLootBoxPluginConfigOK creates a UpdateLootBoxPluginConfigOK with default headers values
func NewUpdateLootBoxPluginConfigOK() *UpdateLootBoxPluginConfigOK {
	return &UpdateLootBoxPluginConfigOK{}
}

/*
UpdateLootBoxPluginConfigOK describes a response with status code 200, with default header values.

successful operation
*/
type UpdateLootBoxPluginConfigOK struct {
	Payload *models.LootBoxPluginConfigInfo
}

// IsSuccess returns true when this update loot box plugin config o k response has a 2xx status code
func (o *UpdateLootBoxPluginConfigOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update loot box plugin config o k response has a 3xx status code
func (o *UpdateLootBoxPluginConfigOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update loot box plugin config o k response has a 4xx status code
func (o *UpdateLootBoxPluginConfigOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update loot box plugin config o k response has a 5xx status code
func (o *UpdateLootBoxPluginConfigOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update loot box plugin config o k response a status code equal to that given
func (o *UpdateLootBoxPluginConfigOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update loot box plugin config o k response
func (o *UpdateLootBoxPluginConfigOK) Code() int {
	return 200
}

func (o *UpdateLootBoxPluginConfigOK) Error() string {
	return fmt.Sprintf("[PUT /admin/namespaces/{namespace}/catalog/plugins/lootbox][%d] updateLootBoxPluginConfigOK  %+v", 200, o.Payload)
}

func (o *UpdateLootBoxPluginConfigOK) String() string {
	return fmt.Sprintf("[PUT /admin/namespaces/{namespace}/catalog/plugins/lootbox][%d] updateLootBoxPluginConfigOK  %+v", 200, o.Payload)
}

func (o *UpdateLootBoxPluginConfigOK) GetPayload() *models.LootBoxPluginConfigInfo {
	return o.Payload
}

func (o *UpdateLootBoxPluginConfigOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LootBoxPluginConfigInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateLootBoxPluginConfigNotFound creates a UpdateLootBoxPluginConfigNotFound with default headers values
func NewUpdateLootBoxPluginConfigNotFound() *UpdateLootBoxPluginConfigNotFound {
	return &UpdateLootBoxPluginConfigNotFound{}
}

/*
UpdateLootBoxPluginConfigNotFound describes a response with status code 404, with default header values.

<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30241</td><td>Category [{categoryPath}] does not exist in namespace [{namespace}]</td></tr></table>
*/
type UpdateLootBoxPluginConfigNotFound struct {
	Payload *models.ErrorEntity
}

// IsSuccess returns true when this update loot box plugin config not found response has a 2xx status code
func (o *UpdateLootBoxPluginConfigNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update loot box plugin config not found response has a 3xx status code
func (o *UpdateLootBoxPluginConfigNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update loot box plugin config not found response has a 4xx status code
func (o *UpdateLootBoxPluginConfigNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update loot box plugin config not found response has a 5xx status code
func (o *UpdateLootBoxPluginConfigNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update loot box plugin config not found response a status code equal to that given
func (o *UpdateLootBoxPluginConfigNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update loot box plugin config not found response
func (o *UpdateLootBoxPluginConfigNotFound) Code() int {
	return 404
}

func (o *UpdateLootBoxPluginConfigNotFound) Error() string {
	return fmt.Sprintf("[PUT /admin/namespaces/{namespace}/catalog/plugins/lootbox][%d] updateLootBoxPluginConfigNotFound  %+v", 404, o.Payload)
}

func (o *UpdateLootBoxPluginConfigNotFound) String() string {
	return fmt.Sprintf("[PUT /admin/namespaces/{namespace}/catalog/plugins/lootbox][%d] updateLootBoxPluginConfigNotFound  %+v", 404, o.Payload)
}

func (o *UpdateLootBoxPluginConfigNotFound) GetPayload() *models.ErrorEntity {
	return o.Payload
}

func (o *UpdateLootBoxPluginConfigNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateLootBoxPluginConfigUnprocessableEntity creates a UpdateLootBoxPluginConfigUnprocessableEntity with default headers values
func NewUpdateLootBoxPluginConfigUnprocessableEntity() *UpdateLootBoxPluginConfigUnprocessableEntity {
	return &UpdateLootBoxPluginConfigUnprocessableEntity{}
}

/*
UpdateLootBoxPluginConfigUnprocessableEntity describes a response with status code 422, with default header values.

<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>
*/
type UpdateLootBoxPluginConfigUnprocessableEntity struct {
	Payload *models.ValidationErrorEntity
}

// IsSuccess returns true when this update loot box plugin config unprocessable entity response has a 2xx status code
func (o *UpdateLootBoxPluginConfigUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update loot box plugin config unprocessable entity response has a 3xx status code
func (o *UpdateLootBoxPluginConfigUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update loot box plugin config unprocessable entity response has a 4xx status code
func (o *UpdateLootBoxPluginConfigUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this update loot box plugin config unprocessable entity response has a 5xx status code
func (o *UpdateLootBoxPluginConfigUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this update loot box plugin config unprocessable entity response a status code equal to that given
func (o *UpdateLootBoxPluginConfigUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the update loot box plugin config unprocessable entity response
func (o *UpdateLootBoxPluginConfigUnprocessableEntity) Code() int {
	return 422
}

func (o *UpdateLootBoxPluginConfigUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /admin/namespaces/{namespace}/catalog/plugins/lootbox][%d] updateLootBoxPluginConfigUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *UpdateLootBoxPluginConfigUnprocessableEntity) String() string {
	return fmt.Sprintf("[PUT /admin/namespaces/{namespace}/catalog/plugins/lootbox][%d] updateLootBoxPluginConfigUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *UpdateLootBoxPluginConfigUnprocessableEntity) GetPayload() *models.ValidationErrorEntity {
	return o.Payload
}

func (o *UpdateLootBoxPluginConfigUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ValidationErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
