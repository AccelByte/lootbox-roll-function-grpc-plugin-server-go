// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: lootbox.proto

package lootbox_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LootBoxClient is the client API for LootBox service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LootBoxClient interface {
	// *
	// RollLootBoxRewards
	RollLootBoxRewards(ctx context.Context, in *RollLootBoxRewardsRequest, opts ...grpc.CallOption) (*RollLootBoxRewardsResponse, error)
}

type lootBoxClient struct {
	cc grpc.ClientConnInterface
}

func NewLootBoxClient(cc grpc.ClientConnInterface) LootBoxClient {
	return &lootBoxClient{cc}
}

func (c *lootBoxClient) RollLootBoxRewards(ctx context.Context, in *RollLootBoxRewardsRequest, opts ...grpc.CallOption) (*RollLootBoxRewardsResponse, error) {
	out := new(RollLootBoxRewardsResponse)
	err := c.cc.Invoke(ctx, "/accelbyte.platform.entitlement.lootbox.v1.LootBox/RollLootBoxRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LootBoxServer is the server API for LootBox service.
// All implementations must embed UnimplementedLootBoxServer
// for forward compatibility
type LootBoxServer interface {
	// *
	// RollLootBoxRewards
	RollLootBoxRewards(context.Context, *RollLootBoxRewardsRequest) (*RollLootBoxRewardsResponse, error)
	mustEmbedUnimplementedLootBoxServer()
}

// UnimplementedLootBoxServer must be embedded to have forward compatible implementations.
type UnimplementedLootBoxServer struct {
}

func (UnimplementedLootBoxServer) RollLootBoxRewards(context.Context, *RollLootBoxRewardsRequest) (*RollLootBoxRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollLootBoxRewards not implemented")
}
func (UnimplementedLootBoxServer) mustEmbedUnimplementedLootBoxServer() {}

// UnsafeLootBoxServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LootBoxServer will
// result in compilation errors.
type UnsafeLootBoxServer interface {
	mustEmbedUnimplementedLootBoxServer()
}

func RegisterLootBoxServer(s grpc.ServiceRegistrar, srv LootBoxServer) {
	s.RegisterService(&LootBox_ServiceDesc, srv)
}

func _LootBox_RollLootBoxRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollLootBoxRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LootBoxServer).RollLootBoxRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accelbyte.platform.entitlement.lootbox.v1.LootBox/RollLootBoxRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LootBoxServer).RollLootBoxRewards(ctx, req.(*RollLootBoxRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LootBox_ServiceDesc is the grpc.ServiceDesc for LootBox service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LootBox_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "accelbyte.platform.entitlement.lootbox.v1.LootBox",
	HandlerType: (*LootBoxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RollLootBoxRewards",
			Handler:    _LootBox_RollLootBoxRewards_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lootbox.proto",
}
